// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using EfCoreToolsTest.Models;

namespace EfCoreToolsTest.DbContext
{
    public partial class DesignPatternsContext : Microsoft.EntityFrameworkCore.DbContext
    {
        public DesignPatternsContext()
        {
        }

        public DesignPatternsContext(DbContextOptions<DesignPatternsContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Logs> Logs { get; set; }
        public virtual DbSet<Permission> Permission { get; set; }
        public virtual DbSet<Prueba> Prueba { get; set; }
        public virtual DbSet<REJEMPLO_PU> REJEMPLO_PU { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<UserRoleAssignment> UserRoleAssignment { get; set; }
        public virtual DbSet<Users> Users { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=ITPROE15;Initial Catalog=DesignPatterns;User ID=sa;Password=P@$$w0rd");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Logs>(entity =>
            {
                entity.HasKey(e => e.IdLog)
                    .HasName("PK_Log");
            });

            modelBuilder.Entity<Permission>(entity =>
            {
                entity.Property(e => e.PermissionId).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.AutoSec).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<REJEMPLO_PU>(entity =>
            {
                entity.Property(e => e.RecordId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Roles>(entity =>
            {
                entity.HasKey(e => e.RoleId)
                    .HasName("Pk_RolId");

                entity.Property(e => e.RoleId).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.AutoSec).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<UserRoleAssignment>(entity =>
            {
                entity.Property(e => e.UserRoleAssignmentId).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.AutoSec).ValueGeneratedOnAdd();

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserRoleAssignment)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserRoleAssignmentId_UserId");
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.Property(e => e.UserId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.AutoSeq).ValueGeneratedOnAdd();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}